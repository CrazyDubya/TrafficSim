init module {
	knowledge {
		blocked(X) :- block(X,1).
	}
	actionspec{
		accelerate(X) {
			pre  { number(X) }
			post { true }
		}
		decelerate(X) {
			pre  { number(X) }
			post { true }
		}
		skip {
			pre  { true }
			post { true }
		}
	}
}

main module{
	program [order=linear] {
		
		if goal(avoid_crash) then decelerate(10).
		
		if goal(decrease_speed), bel(max_deceleration(D)) then decelerate(D).
		
		if goal(maintain_limit), bel(acceleration(A), V is A-0.1) then decelerate(V).
		
		if goal(increase_speed), bel(acceleration(A), V is A+0.5) then accelerate(V).

	}
}

event module{
	program{
		%---------------------------------------
		% Sensing cycle: Update all sensory data
		%---------------------------------------
		% update speed information.
		forall bel( speed(X), percept( speed(Y) ), not (X = Y) ) do delete( speed(X) ).
		forall bel( percept( speed(X) ), not( speed(X) ) ) do insert( speed(X) ).

		% update space gap information.
		forall bel( gap(X), percept( gap(Y) ), not (X = Y) ) do delete( gap(X) ).
		forall bel( percept( gap(X) ), not( gap(X) ) ) do insert( gap(X) ).

		% update time gap information.
		forall bel( time_gap(X), percept( time_gap(Y) ), not (X = Y) ) do delete( time_gap(X) ).
		forall bel( percept( time_gap(X) ), not( time_gap(X) ) ) do insert( time_gap(X) ).

		% update acceleration information.
		forall bel( acceleration(X), percept( acceleration(Y) ), not (X = Y) ) do delete( acceleration(X) ).
		forall bel( percept( acceleration(X) ), not( acceleration(X) ) ) do insert( acceleration(X) ).

		% update max acceleration information.
		% NOTE: This should not be a belief but knowledge. Since I cannot insert this into the knowledge base this is good enough for now.
		forall bel( max_acceleration(X), percept( max_acceleration(Y) ), not (X = Y) ) do delete( max_acceleration(X) ).
		forall bel( percept( max_acceleration(X) ), not( max_acceleration(X) ) ) do insert( max_acceleration(X) ).

		% update max deceleration information.
		% NOTE: This should not be a belief but knowledge. Since I cannot insert this into the knowledge base this is good enough for now.
		forall bel( max_deceleration(X), percept( max_deceleration(Y) ), not (X = Y) ) do delete( max_deceleration(X) ).
		forall bel( percept( max_deceleration(X) ), not( max_deceleration(X) ) ) do insert( max_deceleration(X) ).

		% update speed information.
		forall bel( speed_delta(X), percept( speed_delta(Y) ), not (X = Y) ) do delete( speed_delta(X) ).
		forall bel( percept( speed_delta(X) ), not( speed_delta(X) ) ) do insert( speed_delta(X) ).

		
		
		% update lane information.
		forall bel( lane(X), percept( lane(Y) ), not (X = Y) ) do delete( lane(X) ).
		forall bel( percept( lane(X) ), not( lane(X) ) ) do insert( lane(X) ).
		
		% update speed limit information.
		forall bel( lane_speed_limit(X), percept( lane_speed_limit(Y) ), not (X = Y) ) do delete( lane_speed_limit(X) ).
		forall bel( percept( lane_speed_limit(X) ), not( lane_speed_limit(X) ) ) do insert( lane_speed_limit(X) ).
		
		% update left lane change information.
		forall bel( left_lane_change_allowed(X), percept( left_lane_change_allowed(Y) ), not (X = Y) ) do delete( left_lane_change_allowed(X) ).
		forall bel( percept( left_lane_change_allowed(X) ), not( left_lane_change_allowed(X) ) ) do insert( left_lane_change_allowed(X) ).
		
		% update right lane change information.
		forall bel( right_lane_change_allowed(X), percept( right_lane_change_allowed(Y) ), not (X = Y) ) do delete( right_lane_change_allowed(X) ).
		forall bel( percept( right_lane_change_allowed(X) ), not( right_lane_change_allowed(X) ) ) do insert( right_lane_change_allowed(X) ).

		% update left lane information.
		forall bel( left_lane(X), percept( left_lane(Y) ), not (X = Y) ) do delete( left_lane(X) ).
		forall bel( percept( left_lane(X) ), not( left_lane(X) ) ) do insert( left_lane(X) ).

		% update right lane information.
		forall bel( right_lane(X), percept( right_lane(Y) ), not (X = Y) ) do delete( right_lane(X) ).
		forall bel( percept( right_lane(X) ), not( right_lane(X) ) ) do insert( right_lane(X) ).

		% update downstream lane information.
		forall bel( downstream_lane(X), percept( downstream_lane(Y) ), not (X = Y) ) do delete( downstream_lane(X) ).
		forall bel( percept( downstream_lane(X) ), not( downstream_lane(X) ) ) do insert( downstream_lane(X) ).
		
		% update blocking vehicle information.
		forall bel( block(X, Y), percept( block(Z) ), not (Y = Z) ) do delete( block(X,Y) ).
		forall bel( percept( block(X) ), not( block(me, X) ) ) do insert( block(me, X) ).
		
		%--------------------------------------
		% Update Goals based on new sensory data
		%--------------------------------------

		% Decelerate: Avoid car crash!
		if bel(blocked(me), gap(G), min_gap(MG), G =< 5 * MG) then adopt(avoid_crash) + drop(increase_speed) + drop(decrease_speed) + drop(maintain_limit).
		
		% Decelerate: Critical Zone!
		if bel(blocked(me), gap(G), min_gap(MG), G =< 20 * MG, G > 5 * MG, speed_delta(DS), DS >= 0) then adopt(decrease_speed) + drop(maintain_limit) + drop(increase_speed) + drop(avoid_crash).
		
		% Accelerate: Avoid car crash from behind!
		if bel(blocked(me), gap(G), min_gap(MG), G >= MG, speed_delta(DS), DS =< 0) then adopt(increase_speed) + drop(decrease_speed) + drop(avoid_crash) + drop(maintain_limit).
		
		% Accelerate	
		if not(goal(avoid_crash)), not(goal(decrease_speed)), bel(speed(S), desired_speed(DS), S < DS) then adopt(increase_speed) + drop(maintain_limit).

		% Maintain Speed Limit	
		if not(goal(avoid_crash)), not(goal(decrease_speed)), bel(speed(S), desired_speed(DS), S >= DS) then adopt(maintain_limit) + drop(increase_speed).
		
	}
}
